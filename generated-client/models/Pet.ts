/* tslint:disable */
/* eslint-disable */
/**
 * My Title
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {exists, mapValues} from '../runtime';
import {
    CatFromJSONTyped, CatToJSON,
    DogFromJSONTyped, DogToJSON,
    MouseFromJSONTyped, MouseToJSON
} from './';

/**
 *
 * @export
 * @interface Pet
 */
export interface Pet {
    /**
     *
     * @type {string}
     * @memberof Pet
     */
    id?: string;
    /**
     *
     * @type {string}
     * @memberof Pet
     */
    name?: string | null;
    /**
     *
     * @type {string}
     * @memberof Pet
     */
    discriminator: string;
}

// I like the idea of putting declared constants for type discriminator names somewhere
export const Types = {
    Cat: 'cat',
    Dog: 'dog',
    Mouse: 'mouse'
}

export function PetFromJSON(json: any): Pet {
    return PetFromJSONTyped(json, false);
}

export function PetFromJSONTyped(json: any, ignoreDiscriminator: boolean): Pet {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        switch (json['discriminator']) {
            case Types.Cat:
                return CatFromJSONTyped(json, true);
            case Types.Dog:
                return DogFromJSONTyped(json, true);
            case Types.Mouse:
                return MouseFromJSONTyped(json, true);
        }
    }
    return {

        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'discriminator': json['discriminator'],
    };
}

export function PetToJSON(value?: Pet | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...childToJson(value),  // The blank here before led me to believe some part of the template didnt render?
        'id': value.id,
        'name': value.name,
        'discriminator': value.discriminator,
    };
}

function childToJson(value?: Pet | null): any {
    switch (value.discriminator) {
        case Types.Cat:
            return CatToJSON(value);
        case Types.Dog:
            return DogToJSON(value);
        case Types.Mouse:
            return MouseToJSON(value);
        default:
            return {};  //Not sure on default here?
    }
}
